#ifndef _SimpleAbcViewer_Foundation_h_
#define _SimpleAbcViewer_Foundation_h_

#include <Alembic/AbcGeom/All.h>
#include <Alembic/AbcCoreHDF5/All.h>
#include <Alembic/Util/All.h>

#include <ImathMath.h>
#include <ImathVec.h>
#include <ImathMatrix.h>
#include <ImathBox.h>
#include <ImathQuat.h>
#include <ImathColor.h>
#include <ImathFun.h>
#include <ImathBoxAlgo.h>

#include <boost/format.hpp>
#include <boost/preprocessor/stringize.hpp>
#include <boost/timer.hpp>
#include <boost/program_options.hpp>

#include <iostream>
#include <algorithm>
#include <utility>
#include <fstream>
#include <vector>
#include <set>
#include <map>
#include <iostream>
#include <exception>
#include <string>

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <assert.h>
#include <math.h>

extern "C"
{
	#ifdef ALEMBIC_GLEW_MX

	#define GLEW_MX
	#include <GL/glew.h>
	extern "C" GLEWContext *glewGetContext();

	#else

	#include <GL/glew.h>

	#endif // ifdef ALEMBIC_GLEW_MX

	#include <GL/gl.h>

	#ifdef PLATFORM_WINDOWS
	#include <GL/wglew.h>
	#include <GL/glut.h>
	#else
	#include <GL/glxew.h>
	#include <GL/gl.h>
	#include <GL/glu.h>
	#include <GL/glext.h>
	#include <GL/glut.h>

	#endif // ifdef WIN64
}

//-*****************************************************************************
//-*****************************************************************************
// FUNCTIONS
//-*****************************************************************************
//-*****************************************************************************

//-*****************************************************************************
template <class T>
inline T degrees( const T &rads ) { return 180.0 * rads / M_PI; }

//-*****************************************************************************
template <class T>
inline T radians( const T &degs ) { return M_PI * degs / 180.0; }

//-*****************************************************************************
template <class T>
inline const T &clamp( const T &x, const T &lo, const T &hi )
{
    return x < lo ? lo : x > hi ? hi : x;
}
//-*****************************************************************************
//-*****************************************************************************
// GL ERROR CHECKING
//-*****************************************************************************
//-*****************************************************************************
inline void GL_CHECK( const std::string &header = "" )
{
    GLenum errCode = glGetError();
    if ( errCode != GL_NO_ERROR )
    {
        std::cerr << "GL ERROR in " << header << ": "
                  << ( const char * )gluErrorString( errCode )
                  << std::endl;

        GLint matrixStackDepth = 0;
        glGetIntegerv( GL_MODELVIEW_STACK_DEPTH, &matrixStackDepth );
        std::cout << "Stack depth: " << ( int )matrixStackDepth
                  << std::endl;
    }
}

#if 0

//-*****************************************************************************
#define GL_NOISY( CODE )                        \
do                                              \
{                                               \
    CODE ;                                      \
    GL_CHECK( BOOST_PP_STRINGIZE( CODE ) );     \
    std::cout << "EXECUTED:"                    \
              << BOOST_PP_STRINGIZE( CODE )     \
              << std::endl;                     \
}                                               \
while( 0 )

#else

//-*****************************************************************************
#define GL_NOISY( CODE )                        \
do                                              \
{                                               \
    CODE ;                                      \
    std::string msg = "Code: ";                 \
    msg += BOOST_PP_STRINGIZE( CODE );          \
    GL_CHECK( msg );                            \
}                                               \
while( 0 )

#endif

#endif