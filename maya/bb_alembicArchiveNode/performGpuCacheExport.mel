// Copyright 2013 Autodesk, Inc. All rights reserved. 
//
// Use of this software is subject to the terms of the Autodesk 
// license agreement provided at the time of installation or download, 
// or which otherwise accompanies this software in either electronic 
// or hard copy form.

//
//  Description:
//      This script performs the GpuCacheExportAll and
//      GpuCacheExportSelection commands.
//

//
//  Procedure Name:
//      setOptionVars
//
//  Description:
//      Initialize the option values.
//
//  Input Arguments:
//      Whether to set the options to default values.
//
//  Return Value:
//      None.
proc setOptionVars(int $forceFactorySettings)
{
    // Version 1
    //
    if ($forceFactorySettings || !`optionVar -exists gpuCache_exportCacheTimeRange`) {
        optionVar -intValue gpuCache_exportCacheTimeRange 2;
    }

    if ($forceFactorySettings || !`optionVar -exists gpuCache_exportStart`) {
        optionVar -floatValue gpuCache_exportStart 1;
    }

    if ($forceFactorySettings || !`optionVar -exists gpuCache_exportEnd`) {
        optionVar -floatValue gpuCache_exportEnd 24;
    }

    if ($forceFactorySettings || !`optionVar -exists gpuCache_exportEvaluateEvery`) {
        optionVar -floatValue gpuCache_exportEvaluateEvery 1;
    }

    if ($forceFactorySettings || !`optionVar -exists gpuCache_exportSaveEvery`) {
        optionVar -intValue gpuCache_exportSaveEvery 1;
    }

    if ($forceFactorySettings || !`optionVar -exists gpuCache_exportFileNamePrefix`) {
        // Auto-populate File name prefix
        string $sceneName = `file -q -sceneName`;
        if (size($sceneName) > 0) {
            string $fileNamePrefix = (basenameEx($sceneName) + "_");
            optionVar -stringValue gpuCache_exportFileNamePrefix $fileNamePrefix;
        }
        else {
            optionVar -stringValue gpuCache_exportFileNamePrefix "";
        }
    }

    if ($forceFactorySettings || !`optionVar -exists gpuCache_exportOptimizeHierarchy`) {
        optionVar -intValue gpuCache_exportOptimizeHierarchy 1;
    }

    if ($forceFactorySettings || !`optionVar -exists gpuCache_exportOptimizeThreshold`) {
        optionVar -intValue gpuCache_exportOptimizeThreshold 40000;
    }

    // Version 2
    //
    if ($forceFactorySettings || !`optionVar -exists gpuCache_exportWriteMaterials`) {
        optionVar -intValue gpuCache_exportWriteMaterials 1;
    }

    if ($forceFactorySettings || !`optionVar -exists gpuCache_exportOptimizeAnimationsForMotionBlur`) {
        optionVar -intValue gpuCache_exportOptimizeAnimationsForMotionBlur 0;
    }

    // Version 4
    if ($forceFactorySettings || !`optionVar -exists gpuCache_exportDataFormat`) {
        optionVar -intValue gpuCache_exportDataFormat 1;
    }
}

//
//  Procedure Name:
//      gpuCache_exportSetup
//
//  Description:
//      Update the state of the option box UI to reflect the option values.
//
//  Input Arguments:
//      showFileNamePrefix   - Whether to show the file name prefix text field.
//
//      forceFactorySettings - Whether the option values should be set to
//                             default values.
//
//      parent               - Top level parent layout of the option box UI.
//                             Required so that UI object names can be
//                             successfully resolved.
//
//      filter               - The filter of the owner file dialog.
//      
//  Return Value:
//      None.
//
global proc gpuCache_exportSetup(int $showFileNamePrefix, int $forceFactorySettings, string $parent, string $filter)
{
    //  Retrieve the option settings
    //
    setOptionVars($forceFactorySettings);

    setParent $parent;

    //  Query the optionVar's and set the values into the controls.
    //
    int $cacheTimeRange = `optionVar -q gpuCache_exportCacheTimeRange`;
    if ($cacheTimeRange == 1) {
        radioButtonGrp -e -select 1 rangeRenderSettings;
    } else if ($cacheTimeRange == 2) {
        radioButtonGrp -e -select 1 rangeTimeSlider;
    } else if ($cacheTimeRange == 3) {
        radioButtonGrp -e -select 1 rangeStartEnd;
    }
    gpuCache_exportCacheTimeRangeChanged($parent);

    floatFieldGrp -e -value1 `optionVar -q gpuCache_exportStart` -value2 `optionVar -q gpuCache_exportEnd` startEnd;
    floatFieldGrp -e -value1 `optionVar -q gpuCache_exportEvaluateEvery`     evaluateEvery;
    intFieldGrp   -e -value1 `optionVar -q gpuCache_exportSaveEvery`         saveEvery;

    if ($showFileNamePrefix) {
        textFieldGrp -e -text `optionVar -q gpuCache_exportFileNamePrefix` fileNamePrefix;
    }

    checkBoxGrp   -e -value1 `optionVar -q gpuCache_exportOptimizeHierarchy` optimizeHierarchy;
    intFieldGrp   -e -value1 `optionVar -q gpuCache_exportOptimizeThreshold` optimizeThreshold;
    gpuCache_exportOptimizeHierarchyChanged($parent);

    checkBoxGrp -e -value1 `optionVar -q gpuCache_exportWriteMaterials`                  writeMaterials;
    checkBoxGrp -e -value1 `optionVar -q gpuCache_exportOptimizeAnimationsForMotionBlur` optimizeAnimationsForMotionBlur;

    int $dataFormat = `optionVar -q gpuCache_exportDataFormat`;
    if ($dataFormat == 1) {
        radioButtonGrp -e -select 1 dataFormatHDF5;
    } else if ($dataFormat == 2) {
        radioButtonGrp -e -select 1 dataFormatOgawa;
    }
}

//
//  Procedure Name:
//      gpuCache_exportCallback
//
//  Description:
//      Update the option values with the current state of the option box UI.
//
//  Input Arguments:
//      exportAll          - Whether to export the entire scene or only selected objects.
//
//      showFileNamePrefix - Whether to show file name prefix edit field.
//
//      doIt               - Whether the command should execute.
//
//      parent             - Top level parent layout of the option box UI. Required so
//                           that UI object names can be successfully resolved.
//
//  Return Value:
//      None.
//
global proc gpuCache_exportCallback(int $exportAll, int $showFileNamePrefix, int $doIt, string $parent)
{
    setParent $parent;

    //  Set the optionVar's from the control values, and then
    //  perform the command.
    int $cacheTimeRange = 2;
    if (`radioButtonGrp -q -select rangeRenderSettings`) {
        $cacheTimeRange = 1;
    } else if (`radioButtonGrp -q -select rangeTimeSlider`) {
        $cacheTimeRange = 2;
    } else if (`radioButtonGrp -q -select rangeStartEnd`) {
        $cacheTimeRange = 3;
    }
    optionVar -intValue gpuCache_exportCacheTimeRange $cacheTimeRange;

    optionVar -floatValue gpuCache_exportStart         `floatFieldGrp -q -value1 startEnd`;
    optionVar -floatValue gpuCache_exportEnd           `floatFieldGrp -q -value2 startEnd`;
    optionVar -floatValue gpuCache_exportEvaluateEvery `floatFieldGrp -q -value1 evaluateEvery`;
    optionVar -intValue   gpuCache_exportSaveEvery     `intFieldGrp   -q -value1 saveEvery`;

    if ($showFileNamePrefix) {
        optionVar -stringValue gpuCache_exportFileNamePrefix `textFieldGrp -q -text fileNamePrefix`;
    }

    optionVar -intValue   gpuCache_exportOptimizeHierarchy `checkBoxGrp -q -value1 optimizeHierarchy`;
    optionVar -intValue   gpuCache_exportOptimizeThreshold `intFieldGrp -q -value1 optimizeThreshold`;

    optionVar -intValue   gpuCache_exportWriteMaterials                  `checkBoxGrp -q -value1 writeMaterials`;
    optionVar -intValue   gpuCache_exportOptimizeAnimationsForMotionBlur `checkBoxGrp -q -value1 optimizeAnimationsForMotionBlur`;

    int $dataFormat = 1;
    if (`radioButtonGrp -q -select dataFormatHDF5`) {
        $dataFormat = 1;
    } else if (`radioButtonGrp -q -select dataFormatOgawa`) {
        $dataFormat = 2;
    }
    optionVar -intValue gpuCache_exportDataFormat $dataFormat;

    if ($doIt) {
        performGpuCacheExport 0 $exportAll;
    }
}

//
//  Procedure Name:
//      gpuCache_exportOptionsUI
//
//  Description:
//      Construct the UI for option box or file options.
//
//  Input Arguments:
//      showFileNamePrefix - Whether to show file name prefix text field.
//
//      parent    - Top level parent layout of the option box or file options UI.
//                  Required so that UI object names can be successfully resolved.
//
//  Return Value:
//      Top level layout of the options UI.
//
global proc string gpuCache_exportOptionsUI(int $showFileNamePrefix, string $parent)
{
    //  The argument is used as the parent for the options UI
    //
    setParent $parent;

    //  Activate the default UI template so that the layout of this
    //  option box is consistent with the layout of the rest of the
    //  application.
    //
    setUITemplate -pushTemplate DefaultTemplate;

    //  Turn on the wait cursor.
    //
    waitCursor -state 1;

    // Create option box or file options contents.
    //
    string $optionLayout = `scrollLayout`;
    columnLayout -adjustableColumn true;

        int $labelWidth = 200;

        radioButtonGrp
                -numberOfRadioButtons 1
                -label (uiRes("m_performGpuCacheExport.kCacheTimeRange")) 
                -label1 (uiRes("m_performGpuCacheExport.kRenderSettings"))
                -columnWidth 1 $labelWidth
                rangeRenderSettings;
        radioButtonGrp
                -numberOfRadioButtons 1
                -label1 (uiRes("m_performGpuCacheExport.kTimeSlider")) 
                -shareCollection rangeRenderSettings
                -columnWidth 1 $labelWidth
                rangeTimeSlider;
        radioButtonGrp
                -numberOfRadioButtons 1
                -label1 (uiRes("m_performGpuCacheExport.kStartEnd")) 
                -shareCollection rangeRenderSettings
                -changeCommand1 ("gpuCache_exportCacheTimeRangeChanged " + $optionLayout)
                -columnWidth 1 $labelWidth
                rangeStartEnd;
        floatFieldGrp
                -numberOfFields 2
                -label (uiRes("m_performGpuCacheExport.kStartEnd2")) 
                -columnWidth 1 $labelWidth
                startEnd;
        floatFieldGrp
                -numberOfFields 1
                -label (uiRes("m_performGpuCacheExport.kEvaluateEvery")) 
                -extraLabel (uiRes("m_performGpuCacheExport.kFrames"))
                -columnWidth 1 $labelWidth
                evaluateEvery;
        intFieldGrp
                -numberOfFields 1
                -label (uiRes("m_performGpuCacheExport.kSaveEvery")) 
                -extraLabel (uiRes("m_performGpuCacheExport.kEvaluations"))
                -columnWidth 1 $labelWidth
                saveEvery;

        if ($showFileNamePrefix) {
            textFieldGrp
                    -label (uiRes("m_performGpuCacheExport.kFileNamePrefix"))
                    -columnWidth 1 $labelWidth
                    fileNamePrefix;
        }

        separator -style "none" -height 15;

        checkBoxGrp
                -numberOfCheckBoxes 1
                -label (uiRes("m_performGpuCacheExport.kOptimizeHierarchy"))
                -changeCommand1 ("gpuCache_exportOptimizeHierarchyChanged " + $optionLayout)
                -columnWidth 1 $labelWidth
                optimizeHierarchy;
        intFieldGrp
                -numberOfFields 1
                -label (uiRes("m_performGpuCacheExport.kOptimizationThreshold"))
                -extraLabel (uiRes("m_performGpuCacheExport.kVertices"))
                -columnWidth 1 $labelWidth
                optimizeThreshold;
        checkBoxGrp
                -numberOfCheckBoxes 1
                -label (uiRes("m_performGpuCacheExport.kOptimizeAnimationsForMotionBlur"))
                -columnWidth 1 $labelWidth
                optimizeAnimationsForMotionBlur;

        separator -style "none" -height 15;

        checkBoxGrp
                -numberOfCheckBoxes 1
                -label (uiRes("m_performGpuCacheExport.kWriteMaterials"))
                -columnWidth 1 $labelWidth
                writeMaterials;

        separator -style "none" -height 15;
        
        radioButtonGrp
                -numberOfRadioButtons 1
                -label (uiRes("m_performGpuCacheExport.kFileFormat"))
                -label1 (uiRes("m_performGpuCacheExport.kDataFormatHDF5Label"))
                -annotation (uiRes("m_performGpuCacheExport.kDataFormatHDF5Annot"))
                -columnWidth 1 $labelWidth
                dataFormatHDF5;
        radioButtonGrp
                -numberOfRadioButtons 1
                -label1 (uiRes("m_performGpuCacheExport.kDataFormatOgawaLabel"))
                -annotation (uiRes("m_performGpuCacheExport.kDataFormatOgawaAnnot"))
                -shareCollection dataFormatHDF5
                -columnWidth 1 $labelWidth
                dataFormatOgawa;

    setParent ..;

    //  Turn off the wait cursor.
    //
    waitCursor -state 0;

    // Deactivate the default UI template
    //
    setUITemplate -popTemplate;

    return $optionLayout;
}

//
//  Procedure Name:
//      gpuCache_exportCacheTimeRangeChanged
//
//  Description:
//      Callback procedure when the state of Cache Time Range radio
//      button group has been changed.
//
//  Input Arguments:
//      parent    - Top level parent layout of the option box or file options UI.
//                  Required so that UI object names can be successfully resolved.
//
//  Return Value:
//      None.
//
global proc gpuCache_exportCacheTimeRangeChanged(string $parent)
{
    setParent $parent;

    // enable/disable start/end float fields
    //
    if (`radioButtonGrp -q -select rangeStartEnd`) {
        floatFieldGrp -e -enable 1 startEnd;
    } else {
        floatFieldGrp -e -enable 0 startEnd;
    }
}

//
//  Procedure Name:
//      gpuCache_exportOptimizeHierarchyChanged
//
//  Description:
//      Callback procedure when the state of Optimize Hierarchy checkbox has been changed.
//
//  Input Arguments:
//      parent    - Top level parent layout of the option box or file options UI.
//                  Required so that UI object names can be successfully resolved.
//
//  Return Value:
//      None.
//
global proc gpuCache_exportOptimizeHierarchyChanged(string $parent)
{
    setParent $parent;

    // enable/disable Optimize Threshold
    //
    if (`checkBoxGrp -q -value1 optimizeHierarchy`) {
        intFieldGrp -e -enable 1 optimizeThreshold;
        checkBoxGrp -e -enable 1 optimizeAnimationsForMotionBlur;
    }
    else {
        intFieldGrp -e -enable 0 optimizeThreshold;
        checkBoxGrp -e -enable 0 optimizeAnimationsForMotionBlur;
    }
}

//
//  Procedure Name:
//      exportOptions
//
//  Description:
//      Construct the option box UI. Involves accessing the standard option
//      box and customizing the UI accordingly.
//
//  Input Arguments:
//      exportAll - Whether to export the entire scene or only selected objects.
//
//  Return Value:
//      None.
//
proc exportOptions(int $exportAll)
{
    //  Name of the command for this option box.
    //
    string $commandName;
    if ($exportAll) {
        $commandName = "GpuCacheExportAll";
    }
    else {
        $commandName = "GpuCacheExportSelection";
    }

    //  Build the option box actions.
    //
    string $callback = "gpuCache_exportCallback";
    string $setup    = "gpuCache_exportSetup";
    
    // Determine whether we are exporting multi-hierarchy or single-hierarchy
    //
    int $showFileNamePrefix = 0;
    if (!$exportAll) {
        string $nodes[] = `getGpuCacheExportNodeList`;
        $showFileNamePrefix = (size($nodes) > 1);
    }

    //  STEP 1:  Get the option box.
    //  ============================
    //
    //  The value returned is the name of the layout to be used as
    //  the parent for the option box UI.
    //
    global string $gOptionBoxOptions;
    $gOptionBoxOptions = "noApplyAndClose";  // No Apply
    string $layout = getOptionBox();

    //  STEP 2:  Pass the command name to the option box.
    //  =================================================
    //
    //  Any default option box behaviour based on the command name is set
    //  up with this call. For example, updating the 'Help' menu item with
    //  the name of the command.
    //
    setOptionBoxCommandName($commandName);

    //  STEP 3:  Create option box contents.
    //  ====================================
    //
    string $parent = `gpuCache_exportOptionsUI $showFileNamePrefix $layout`;

    //  STEP 4:  Customize the buttons.
    //  ===============================
    //
    //  Provide more descriptive labels for the buttons.
    //  Disable those buttons that are not applicable to the option box.
    //  Attach actions to those buttons that are applicable to the option box.

    // 'Export' button
    //
    string $exportBtn = getOptionBoxApplyBtn();
    button -e -label (uiRes("m_performGpuCacheExport.kExport"))
           -command ($callback + " " + $exportAll + " " + $showFileNamePrefix + " 1 " + $parent + "; hideOptionBox")
           $exportBtn;

    // 'Save' button
    //
    string $saveBtn = getOptionBoxSaveBtn();
    button -e
           -command ($callback + " " + $exportAll + " 0 0 " + $parent + "; hideOptionBox")
           $saveBtn;

    // 'Reset' button
    //
    string $resetBtn = getOptionBoxResetBtn();
    button -e
           -command ($setup + " " + $showFileNamePrefix + " 1 " + $parent + " \"\"")
           $resetBtn;

    //  STEP 5:  Set the option box title.
    //  ==================================
    //
    setOptionBoxTitle((uiRes("m_performGpuCacheExport.kGpuCacheExportOptions")));

    //  STEP 6:  Customize the 'Help' menu item text.
    //  =============================================
    //
    setOptionBoxHelpTag($commandName);

    //  Set the current values of the option box.
    //  =========================================
    //
    eval ($setup + " " + $showFileNamePrefix + " 0 " + $parent + " \"\"");

    //  Show the option box.
    //  ====================
    //
    showOptionBox();

    // Remove file name prefix option var, it shouldn't be saved.
    optionVar -remove gpuCache_exportFileNamePrefix;
}

//
//  Procedure Name:
//      getGpuCacheExportNodeList
//
//  Description:
//      Determine which nodes to export.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      An array of nodes.
//
global proc string[] getGpuCacheExportNodeList()
{
    // Determine which nodes to export
    return python("getGpuCacheExportNodeList()");
}

// MEL doesn't support string hashing so we use python for better scalability.
// Only one global method should be declared in python context.
python(
	"import maya.cmds as gpuCacheExportNodeListCmds\n" +
	"def getGpuCacheExportNodeList():\n" +
	"    nodes    = gpuCacheExportNodeListCmds.ls(selection = True, long = True)\n" +
	"    nodesSet = set(nodes)\n" +
	"    # Remove child/descendent nodes\n" +
	"    newNodes = []\n" +
	"    for longName in nodes:\n" +
	"        steps      = longName.split('|')\n" +
	"        parentName = steps[0]\n" +
	"        parentSel  = False\n" +
	"        for i in range(1, len(steps)-1):\n" +
	"           parentName = parentName + '|' + steps[i]\n" +
	"           if parentName in nodesSet:\n" +
	"               parentSel = True\n" +
	"               break\n" +
	"        if not parentSel:\n" +
	"            newNodes.append(longName)\n" +
	"    nodes    = newNodes\n" +
	"    nodesSet = set(newNodes)\n" +
	"    # Check there is bakeable geometry\n" +
	"    newNodes = []\n" +
	"    for longName in nodes:\n" +
	"        bakeables = gpuCacheExportNodeListCmds.listRelatives(longName, " +
	"            fullPath = True, allDescendents = True, " +
	"            type = ['mesh', 'nurbsSurface', 'subdiv', 'gpuCache'])\n" +
	"        hasGeom = False\n" +
	"        if bakeables is not None:\n" +
	"            for bakeable in bakeables:\n" +
	"                if not gpuCacheExportNodeListCmds.getAttr(bakeable + '.io'):\n" +
	"                    hasGeom = True\n" +
	"                    break\n" +
	"            if hasGeom:\n" +
	"                newNodes.append(longName)\n" +
	"    return newNodes"
);

//
//  Procedure Name:
//      captureGpuCacheExportOptionVars
//
//  Description:
//      Capture the current state of option values to an argument list.
//
//  Input Arguments:
//      exportAll - Whether to export the entire scene or only selected objects.
//
//  Return Value:
//      A list of arguments to invoke AbcExport.
//
global proc string[] captureGpuCacheExportOptionVars(int $version, int $exportAll)
{
    setOptionVars(0);
    int    $cacheTimeRange            = `optionVar -q gpuCache_exportCacheTimeRange`;
    float  $start                     = `optionVar -q gpuCache_exportStart`;
    float  $end                       = `optionVar -q gpuCache_exportEnd`;
    float  $evaluateEvery             = `optionVar -q gpuCache_exportEvaluateEvery`;
    int    $saveEvery                 = `optionVar -q gpuCache_exportSaveEvery`;
    string $fileNamePrefix            = `optionVar -q gpuCache_exportFileNamePrefix`;
    int    $optimizeHierarchy         = `optionVar -q gpuCache_exportOptimizeHierarchy`;
    int    $optimizeThreshold         = `optionVar -q gpuCache_exportOptimizeThreshold`;

    string $args[] = {
        "" + $exportAll,
        $cacheTimeRange,
        $start,
        $end,
        $evaluateEvery,
        $saveEvery,
        $fileNamePrefix,
        $optimizeHierarchy,
        $optimizeThreshold
    };

    if ($version >= 2) {
        int $writeMaterials                  = `optionVar -q gpuCache_exportWriteMaterials`;
        int $optimizeAnimationsForMotionBlur = `optionVar -q gpuCache_exportOptimizeAnimationsForMotionBlur`;

        string $argsVer2[] = {
            "" + $writeMaterials,
            $optimizeAnimationsForMotionBlur
        };

        appendStringArray($args, $argsVer2, 2);
    }

    if ($version >= 3) {
        string $argsVer3[] = {
            "0", "", "1"
        };

        appendStringArray($args, $argsVer3, 3);
    }

    if ($version >= 4) {
        int $dataFormat = `optionVar -q gpuCache_exportDataFormat`;

        string $argsVer4[] = {
            "" + $dataFormat
        };

        appendStringArray($args, $argsVer4, 1);
    }

    return $args;
}

//
//  Procedure Name:
//      assembleCmd
//
//  Description:
//      Construct the command that will apply the option box values.
//
//  Input Arguments:
//      exportAll - Whether to export the entire scene or only selected objects.
//
proc string assembleCmd(int $exportAll)
{
    int $version = 4;
    string $args[] = captureGpuCacheExportOptionVars($version, $exportAll);
    string $cmd = "doGpuCacheExportArgList " + $version + " {";
    int $i;
    for ($i = 0; $i < size($args); $i++) {
        if ($i > 0) $cmd += ",";
        $cmd += ("\"" + encodeString($args[$i]) + "\"");
    }
    $cmd += "};";
    return $cmd;
}

//
//  Procedure Name:
//      performGpuCacheExport
//
//  Description:
//      Perform the GpuCacheExportAll or GpuCacheExportSelection command using the
//      corresponding option values. This procedure will also show the option box
//      window if necessary as well as construct the command string
//      that will invoke the sphere command with the current
//      option box values.   
//
//  Input Arguments:
//      0 - Execute the command.
//      1 - Show the option box dialog.
//      2 - Return the command.
//
//      exportAll - Whether to export the entire scene or only selected objects.
//
//  Return Value:
//      None.
//
global proc string performGpuCacheExport(int $action, int $exportAll)
{
    string $cmd;

    switch ($action)
    {
    //  Execute the command.
    //
    case 0:
        // If the Dialog Style is OS Native, instead of auto-populate the
        // file name prefix, we use an empty string.
        if (`optionVar -q FileDialogStyle` == 1 && 
                !`optionVar -exists gpuCache_exportFileNamePrefix`) {
            optionVar -stringValue gpuCache_exportFileNamePrefix "";
        }

        //  Get the command.
        //
        $cmd = assembleCmd($exportAll);

        //  Execute the command with the option settings.
        //
        eval($cmd);

        break;

    //  Show the option box.
    //
    case 1:
        //  Show the option box.
        //
        exportOptions($exportAll);
        break;

    //  Return the command string.
    //
    case 2:
        //  Get the command.
        //
        $cmd = assembleCmd($exportAll);
        break;
    }

    return $cmd;
}

