#! /usr/bin/env python
#-******************************************************************************
#
# Copyright (c) 2012-2013,
#  Sony Pictures Imageworks Inc. and
#  Industrial Light & Magic, a division of Lucasfilm Entertainment Company Ltd.
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
# *       Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
# *       Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
# *       Neither the name of Sony Pictures Imageworks, nor
# Industrial Light & Magic, nor the names of their contributors may be used
# to endorse or promote products derived from this software without specific
# prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#-******************************************************************************

import os
import sys
import imath
import cask

__doc__ = """
Simple tree utility for Alembic caches.

    > abctree <file1.abc> .. <fileN.abc> [-v]
    ABC
     `-- [type] name [[ start end ]] [values]

Note that verbose mode only displays the first 4 values of
any property. To see all the values, use abcview.
"""

def create_parser():
    """
    Creates and returns the command line option parser.
    """
    from optparse import OptionParser, OptionGroup
    parser = OptionParser(usage=__doc__)
    base_group = OptionGroup(parser, "Basic Options")
    base_group.add_option('-d', '--depth', default=None, 
            help='maximum hierarchy depth to walk')
    base_group.add_option('-f', '--find', default=None,
            help='find node by name (supports regex, must be in quotes)')
    base_group.add_option('-n', '--newick', action="store_true",
            help='display as a newick tree (requires ete2)')
    base_group.add_option('-v', '--verbose', action="store_true",
            help='display verbose hierarchy information')
    base_group.add_option('-i', '--index', default=0,
            help='sample index for displaying values in verbose mode')
    parser.add_option_group(base_group)
    return parser

def format_value(value):
    """
    Formats a value for the command line usage.
    """
    ret_value = []
    if type(value) in [bool, str, int, unicode]:
        ret_value.append(str(value))
    elif type(value) in [float]:
        ret_value.append("%.2f" % value)
    elif type(value) in [imath.Box3d]:
        ret_value.append(format_value([
                    format_value(value.min()[0]),
                    format_value(value.min()[1]),
                    format_value(value.min()[2]),
                    format_value(value.max()[0]),
                    format_value(value.max()[1]),
                    format_value(value.max()[2])
                    ]
                ))
    else:
        try:
            for i, v in enumerate(value):
                if i < 4:
                    ret_value.append(format_value(v))
                elif i == 4:
                    ret_value.append("...")
        except TypeError, e:
            ret_value.append(str(value))
    return ", ".join(ret_value)

def is_last(obj):
    """
    Returns True if this obj is the last node in the tree.
    """
    if not obj.parent:
        return True
    if type(obj) == cask.Property:
        return obj.parent.properties.values()[-1] == obj and \
               (type(obj.parent) == cask.Property or len(obj.parent.children) == 0)
    return obj.parent.children.values()[-1] == obj

def newick(obj, node=None):
    """
    http://packages.python.org/ete2/tutorial/tutorial_trees.html
    >>> print t.get_ascii(show_internal=True)
    """
    from ete2 import Tree
    if type(obj) in [list, set]:
        for o in obj:
            newick(o)
    else:
        if node is None:
            node = Tree()
        if type(obj) == cask.Archive:
            obj = obj.top
        node = node.add_child(name=obj.name)
        for child in obj.children:
            newick(child, node)
        return node

def tree(obj, depth=None, verbose=False, pre=""):
    """
    Prints to stdout a tree representation of an Alembic hierarchy.

    :param verbose: display verbose information
    """
    if type(obj) in [list, set]:
        for o in obj:
            tree(o, depth, verbose)
    else:
        if type(obj) == cask.Top:
            pre = ""
        else:
            if type(obj.parent) != cask.Top:
                pre += "   "
            if is_last(obj):
                print pre, '`--',
                pre += " "
            else:
                print pre, '|--',
                pre += " |"
        if verbose:
            print obj.type(), 
        print obj.name,
        if verbose:
            if type(obj) == cask.Property and not obj.is_compound:
                if obj.values and int(opts.index) < len(obj.values):
                    print format_value(obj.get_value(int(opts.index))),
            elif type(obj) != cask.Top and type(obj) != cask.Property:
                print "[", obj.start_frame(), "-", obj.end_frame(), "]",
        print '\r'
        if verbose:
            for prop in obj.properties.values():
                tree(prop, depth, verbose, pre)
        if type(obj) != cask.Property:
            for child in obj.children.values():
                tree(child, depth, verbose, pre)

def main(path):
    if type(path) in [list, set]:
        for p in path:
            main(p)
    else:
        if not cask.is_valid(path):
            print "Not a valid Alembic file", path
            return 1
        a = cask.Archive(path)
        if opts.find:
            nodes = cask.find(a.top, opts.find)
        else:
            nodes = a.top
        if opts.newick:
            node = newick(nodes)
            print node.get_ascii(show_internal=True)
        else:
            try:
                tree(nodes, opts.depth, opts.verbose)
            except IOError:
                return 1
        return 0

if __name__ == "__main__":
    parser = create_parser()
    (opts, args) = parser.parse_args()
    if len(args) == 0:
        parser.print_help()
    else:
        sys.exit(main(args))
