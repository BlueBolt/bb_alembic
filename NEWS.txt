2011-08--09, Alembic 1.0

Hello, Alembic users, welcome to our first gold release of Alembic.

The complete code changes for this release can be examined here:
http://codereview.appspot.com/4819067/

Some highlights:

 - Addition of the Arnold procedural.

 - Removal of some things that weren't Alembic related (GLUtil)

 - Addition of a python unit test suite for AbcExport and AbcImport.

 - Lots of Houdini SOP improvements.

 - Cleanup of many compiler warnings.

This initial 1.0 version can now be used for critical, deadline-driven
production work.

Also as usual, feedback and questions are welcome!  The main discussion list
is low-traffic, but anyone can sign up and participate:

http://groups.google.com/group/alembic-discussion

2011-06-28, Alembic 1.0rc1

Hello, Alembic users, welcome to the latest beta version of Alembic.  As we
close in on a 1.0 release, we hope the API and file format are now stable
and fully forwards-compatible.  We consider these to be at a first
"Release Candidate" stage. (note that this doesn't yet apply to the
application-specific reference implementations). As with all pre-release
software, we can't guarantee that changes won't occur between now and a full
1.0 release.

This release is mostly a bugfix and cleanup release.  We've improved the build
support for Windows and OS X, as well as conformed the definitions of the Curves
and NuPatch types more closely to the RI spec.  Those changes, though, do mean
that Curves and NuPatch geometry written out with previous releases will not be
recognized with this release.

The complete code changes for this release can be examined here:

http://codereview.appspot.com/4662068

Some highlights:

 - The flags and arguments for the AbcExport Maya plugin have been updated
   based on feedback from the community, and to be more Maya-idiomatic.
   You can see all the arguments supported by entering "AbcExport -h"
   in the script editor.

 - The Makefile setup for the AlembicIn Houdini SOP is greatly simplified,
   though still not fully integrated with Alembic's CMake setup.

 - The PRMan procedural now supports the Points, NuPatch, Curves, and FaceSet
   types from AbcGeom.

One other important thing to note: previous releases of Alembic did not
require any of the compiled Boost libraries, but going forward, Alembic
requires libboost_thread.

Although this is our initial 1.0 release candidate, it should still be
considered pre-release software, and should not be used for critical, deadline-
driven production work.

Also as usual, feedback and questions are welcome!  The main discussion list
is low-traffic, but anyone can sign up and participate:

http://groups.google.com/group/alembic-discussion

As always, discussion is welcome on the discussion list.

##-*****************************************************************************
2011-05-18, Alembic 0.9.3:

The biggest news in this release is what we hope is the complete set of
geometric types for ALembic 1.0, which includes curves (fashioned after
RiCurves), nurbs surfaces, facesets in polygons and subds, and a camera
definition. See http://code.google.com/p/alembic/wiki/Alembic_Geometric_Types
for a complete list.

The complete code changes for this release can be examined here:

http://codereview.appspot.com/4517085

Some highlights:

 - There is now a single class for expression transforms. Preivously
   we had both SimpleXform and Xform objects for expressing transformation.
   The new unified Xform class can be used more simply than the old
   Xform class, while retaining the expressivity of the original.

 - We have experimental support for building Alembic on Windows. Details
   for how to perform the build can found in build/Windows/README.txt and
   build/Windows/WindowsBuildSteps.html

 - We've changed the API in a couple places, most notably, in the way
   instances of the class class Alembic::AbcCoreAbstract::TimeSampling are
   stored and referenced.

 - There is a reference Houdini SOP that can read an entire Alembic archive
   or a subtree of an archive with the option to bake in transformations. As
   such, it could also serve as the "leaf" node for an import process which
   rebuilt the full transformation hierarchy within Houdini. The intention is
   to pair this with a CHOP (not slated for inclusion this round) which extracts
   transformation channels from the archive.  However, it is not yet integrated
   into the Alembic build infrastructure, so compiling it may take some work.

As this is still a 0.9 release, it is still to be considered Beta, and
should not be used for critical, deadline-driven production work.

Also as usual, feedback and questions are welcome!  The main discussion list
is low-traffic, but anyone can sign up and participate:

http://groups.google.com/group/alembic-discussion

As always, discussion is welcome on the discussion list.

##-*****************************************************************************

2011-02-17, Alembic 0.9.2:

This is somewhere between a major and minor update.  Numerous bugs
have been fixed, some new functionality has been introduced, and
reference Maya plugins for import and export have been added.

The code changes can be examined here:

http://codereview.appspot.com/4160045/

Some highlights in functionality:

 - Maya export and import plugins are in the top-level "maya" directory.

 - In the top-level "python" directory is the beginning of Python bindings
   using Boost.Python.  This effort is currently incomplete, but with
   these bindings, the structure of an Alembic Archive can be examined.

 - UVs on PolyMeshes and SubD meshes, as well as Normals on PolyMeshes,
   are included in their definition, and can be written and read as
   indexed arrays or expanded, non-indexed arrays, with automatic
   interconversion between the two representations.

As this is still a 0.9 release, it is still to be considered Beta, and
should not be used for critical, deadline-driven production work.

Also as usual, feedback and questions are welcome!  The main discussion list
is low-traffic, but anyone can sign up and participate:

http://groups.google.com/group/alembic-discussion

As always, discussion is welcome on the discussion list:

##-*****************************************************************************

2010-12-13, Alembic 0.9.1:

Just a minor update to enable Alembic on 32-bit systems, along with
getting the code in examples/bin/AbcEcho reasonably working.

2010-12-08, Alembic 0.9.1:

The main things in this release are the addition of a Renderman procedural
plugin, and a bunch of bug fixes.  The example Maya exporter
(AlembicSimpleAbcExport) can be used to create an Alembic file from a Maya
scene, and that Alembic file can be read by the Renderman plugin to create
images, which means that an end-to-end workflow can be achieved.  A complete
overview of the changes to the code is here:

http://codereview.appspot.com/3427045

A summary of the bugs fixed in this change:

http://code.google.com/p/alembic/issues/detail?id=71

An internal implementation detail that fixed an issue where files created by
the AlembicSimpleAbcExport Maya plugin were invalid.

http://code.google.com/p/alembic/issues/detail?id=118

Another internal implementation bugfix that ensured that certain properties of
a subdivision surface were properly animatable.

http://code.google.com/p/alembic/issues/detail?id=17

Method to return a Property's parent Object simply did not work.

http://code.google.com/p/alembic/issues/detail?id=121

Methods to determine high-level type now more flexible and correct.

http://code.google.com/p/alembic/issues/detail?id=7

Build system improvement; now behaves better when trying to find the Boost
headers and libraries.

http://code.google.com/p/alembic/issues/detail?id=13

A consequence of the bug that was fixed in issue 71.

http://code.google.com/p/alembic/issues/detail?id=123

Alembic was not reading all the required data from an ISimpleXform.


In progress, we have:

http://code.google.com/p/alembic/issues/detail?id=102

This is an arbitrary transform "stack" type, roughly equivalent to Renderman's
transformation model.  It has per-operation hints that allow it to be
recognized as a transform and mapped directly to another application's
transformation model.  It can also be read and written as a regular 4x4
matrix.

##-*****************************************************************************
